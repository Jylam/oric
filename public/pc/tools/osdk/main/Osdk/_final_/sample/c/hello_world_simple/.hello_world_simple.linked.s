//
// This file was generated by Link65 version 0.066 
// Do not edit by hand
//



	.zero

	*= $50




ap		.dsb 2		
fp		.dsb 2		
sp		.dsb 2		

tmp0	.dsb 2
tmp1	.dsb 2
tmp2	.dsb 2
tmp3	.dsb 2
tmp4	.dsb 2
tmp5	.dsb 2
tmp6	.dsb 2
tmp7	.dsb 2

op1		.dsb 2
op2		.dsb 2

tmp		.dsb 2

reg0	.dsb 2
reg1	.dsb 2
reg2	.dsb 2
reg3	.dsb 2
reg4	.dsb 2
reg5	.dsb 2
reg6	.dsb 2
reg7	.dsb 2


	.text

osdk_start
    

	
	

	
	
	




	tsx
	lda #<osdk_stack
	sta sp
	lda #>osdk_stack
	sta sp+1
	ldy #0
	stx retstack
	jmp _main
retstack	
	.byt 0

























	
	
	









enter
	sty tmp		
	stx tmp+1
	
	
	asl			
	sta op2		
	tax
	beq noregstosave
savereg	
    lda reg0-1,x
	sta (sp),y
	iny
	dex
	bne savereg
	
noregstosave
	sty op2+1	
	
	
	lda ap
	sta (sp),y
	iny
	lda ap+1
	sta (sp),y
	iny
	
	
	lda fp
	sta (sp),y
	iny
	lda fp+1
	sta (sp),y
	iny
	
	
	lda op2
	sta (sp),y
	iny
	lda tmp		
	sta (sp),y
	
	
	
	
	clc
	lda sp
	sta ap
	adc op2+1
	sta fp	
	lda sp+1
	sta ap+1
	adc #0
	sta fp+1
	
	
	lda tmp+1
	adc fp
	sta sp
	lda fp+1
	adc #0
	sta sp+1
	rts

	








	
leave
	stx op2			
	sta op2+1		
	
	
	lda ap
	sta sp
	lda ap+1
	sta sp+1
	
	ldy #4
	lda (fp),y
	tax
	iny
	lda (fp),y
	tay
	txa
	beq noregstorestore
	
restorereg
	lda (sp),y
	sta reg0-1,x
	iny
	dex
	bne restorereg
	
noregstorestore
	
	ldy #0
	lda (fp),y
	sta ap
	iny
	lda (fp),y
	sta ap+1
	
	
	iny
	lda (fp),y
	sta tmp+0
	tax
	iny
	lda (fp),y
	sta fp+1
	stx fp
	
	ldx op2			
	lda op2+1		
	rts

jsrvect 
	jmp (0000)

_exit
	ldx retstack
	txs
	rts

reterr
	lda #$ff	
	tax
	rts

retzero
false
	lda #0		
	tax
	rts

true
	ldx #1		
	lda #0
	rts


#define load_acc1	$DE7B
#define load_acc2	$DD51
#define store_acc	$DEAD
#define fadd		$DB25
#define fsub		$DB0E
#define fmul		$DCF0
#define fdiv		$DDE7
#define fneg		$E271
#define fcomp		$DF4C
#define cif			$DF24

cfi     
	jsr $DF8C
    ldx $D3
    lda $D4
    rts


























































 



_main
ldx #6 
 lda #0 
 jsr enter 

lda #<(L130) 
 ldy #0 
 sta (sp),y 
 iny 
 lda #>(L130) 
 sta (sp),y 

ldy #2 
 jsr _printf 

jmp leave 

L130
.byt $48
.byt $65
.byt $6c
.byt $6c
.byt $6f
.byt $20
.byt $57
.byt $6f
.byt $72
.byt $6c
.byt $64
.byt $20
.byt $21
.byt $a
.byt $0




_printf
	lda #<putchar
	sta printvect+1
	lda #>putchar
	sta printvect+2
	ldy #0
	jmp printf

printvect jmp $0238

storechar
	sta $1234
	inc storechar+1
	bne *+5
	inc storechar+2
	rts
	



_sprintf
	lda #<storechar
	sta printvect+1
	lda #>storechar
	sta printvect+2
	
	ldy #0
	lda (sp),y
	sta storechar+1
	iny
	lda (sp),y
	sta storechar+2
	iny

printf
	lda (sp),y
	sta tmp
	iny
	lda (sp),y
	sta tmp+1
	iny
	sty saveptrarg

	ldy #0
formloop
	lda (tmp),y
	tax
	beq endform
    cmp #$25        
	beq formfield
charput
        jsr printvect
	iny
	bne formloop	
endform
	rts
printfloat
	iny
	sty saveptrform
	clc
	lda sp
	adc saveptrarg
	tax
	lda sp+1
	adc #0
	tay
	txa
	jsr load_acc1
	jsr $E0D5
	sta op2
	sty op2+1
	clc
	lda saveptrarg
	adc #5
	sta saveptrarg
	ldy #0
	jmp prtsloop
        
formfield
	iny
	lda (tmp),y
	cmp #$64        
	beq printint
	cmp #"u"        
	beq printuint
	cmp #$66        
	beq printfloat
	cmp #$73        
	beq printstr
	cmp #$63        
	beq printchar
	cmp #$78        
	beq printhex
	jmp charput
printchar
	sty saveptrform
	ldy saveptrarg
	lda (sp),y
	tax
	iny
	iny
	sty saveptrarg
	ldy saveptrform
	jmp charput
printstr
	iny
	sty saveptrform
	ldy saveptrarg
	lda (sp),y
	sta op2
	iny
	lda (sp),y
	sta op2+1
	iny
	sty saveptrarg
	ldy #0
prtsloop
	lda (op2),y
	tax
	beq endprts
        jsr printvect
	iny
	bne prtsloop
	inc op2+1
	jmp prtsloop
endprts
	ldy saveptrform
	jmp formloop

printint
	iny
	sty saveptrform
	jsr nextarg
	jsr itoa
	stx op2
	sta op2+1
	ldy #0
	jmp prtsloop

printuint
	iny
	sty saveptrform
	jsr nextarg
	jsr uitoa
	stx op2
	sta op2+1
	ldy #0
	jmp prtsloop

printhex
	iny
	sty saveptrform
	jsr nextarg
	lda op2+1
	jsr hexbyte
	lda op2
	jsr hexbyte
	ldy saveptrform
	jmp formloop

saveptrform
	.byt 0
saveform
	.byt 0,0
saveptrarg
	.byt 0

hexbyte
	tay 
	lsr 
	lsr 
	lsr 
	lsr 
	jsr nibble
	tya
	and #$0F
nibble
	cmp #10
	bcc chiffre
	adc #6
chiffre
	adc #$30
	tax
	jmp printvect

nextarg
	ldy saveptrarg
	lda (sp),y
	sta op2
	iny
	lda (sp),y
	sta op2+1
	iny
	sty saveptrarg
	rts




_itoa
	ldy #0
	lda (sp),y
	sta op2
	iny
	lda (sp),y
	sta op2+1

itoa
	ldy #0
	sty bufconv
	lda op2+1
	bpl uitoa
	lda #$2D	
	sta bufconv
	sec
	lda #0
	sbc op2
	sta op2
	lda #0
	sbc op2+1
	sta op2+1

itoaloop
	jsr udiv10
	pha
	iny
	lda op2
	ora op2+1
	bne itoaloop
	
	lda bufconv
	beq poploop
	inx
poploop
	pla
	clc
	adc #$30
	sta bufconv,x
	inx
	dey
	bne poploop
	lda #0
	sta bufconv,x
	ldx #<bufconv
	lda #>bufconv
	rts

uitoa
	ldy #0
	sty bufconv
	jmp itoaloop

bufconv
	.byt 0,0,0,0,0,0,0,0,0,0,0,0




udiv10
	lda #0
	ldx #16
	clc
udiv10lp
	rol op2
	rol op2+1
	rol 
	cmp #10
	bcc contdiv
	sbc #10
contdiv
	dex
	bne udiv10lp
	rol op2
	rol op2+1
    rts
        




_getchar
	jsr $023B
	bpl _getchar	
	tax
	jsr $0238	
	lda #0
	rts




_putchar
	ldy #0
	lda (sp),y
putchar
    cmp #$0A
    bne putchar2
    pha
    ldx #$0D
    jsr $0238
    pla
putchar2
    tax
	jmp $0238





_puts
	ldy #0
	lda (sp),y
	sta tmp
	iny
	lda (sp),y
	sta tmp+1
	ldy #0
putsloop
	lda (tmp),y
	beq endputs
	jsr putchar
	iny
	bne putsloop
	inc tmp+1
	jmp putsloop
endputs
	lda #$0A
	jmp putchar




_gets
	ldy #0
	lda (sp),y
	sta tmp
	iny
	lda (sp),y
	sta tmp+1
gets
	ldy #0

getsloop
	jsr $023B
	cmp #$0D
	beq endgets
	cmp #$20
	bcc getsloop
	cmp #$7f
	beq backspace
	cpy #$ff
	beq getsloop
	sta (tmp),y
	iny
echochar
	tax
	jsr $0238
	jmp getsloop
backspace
	cpy #0
	beq getsloop
	dey
	jmp echochar
endgets
        lda #$0A
        jsr putchar
	lda #0
	sta (tmp),y
	ldx tmp
	lda tmp+1
	rts






osdk_stack
	.dsb 256

osdk_check
	.asc "Dbug"

osdk_end 


